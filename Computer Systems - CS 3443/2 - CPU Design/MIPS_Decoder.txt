# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# MIPS Decoder by Michael McQuade                                           #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Purpose:                                                                  #
#	Decode the MIPS instruction based on the opcode and funct fields.         #
#	Send out control lines to control the "ALU32" unit, "TSelect" unit,       #
#	"ShiftControlSelect" unit, And "OutputSelect" unit.                       #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#  Inputs (32):                                                             #
#	 The 32 bits of the instruction                                           #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

inputNames { in[31:0] }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Outputs (10):                                                           #
#	  F1, F0, INVA, INVB, CIN: Control lines for ALU                          #
#	  selectImm: Whether to use the immediate argument or the t register      #
#	  signExtend: Whether to sign-extend the immediate argument               #
#  	selectShAmt: Whether to use the immediate shift amount (sh4 .. sh0)     #
#		or the variable amount (t4..t0) to control the shifter                  #
#	  selectALU: Whether to choose the ALU or Shifter for the final output    #
# 	selectMultiply: Whether to choose the multiply unit as the final output #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

outputNames { F1, F0, INVA, INVB, CIN, selectImm, signExtend, selectShAmt, selectALU, selectMultiply }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                                       #
# All Instruction Types that must be decoded:          # # # # # # # #    #
# ADDU – add unsigned (does the same thing as ADD)    # -- add32   -- #      #
# ADD – Add (ignore the overflow)                     # -- add32   -- #      #
# ADDI – Add immediate (ignore the overflow)          # -- add32   -- #      #
# AND – Bitwise AND of two registers                  # -- and32   -- #      #
# ANDI – Bitwise AND immediate                        # -- and32   -- #      #
# OR – Bitwise OR                                     # -- or32    -- #      #
# ORI – Bitwise OR immediate                          # -- or32    -- #      #
# SLT – Set less than                                 # -- slt     -- #      #
# SLTI – Set less than immediate                      # -- slt     -- #      #
# SRL – Shift right logical                           # -- shift32 -- #      #
# SRLV – Shift right logical variable                 # -- shift32 -- #      #
# SRA – Shift right arithmetic                        # -- shift32 -- #      #
# SUB – Subtract (ignore the overflow)                # -- add32   -- #      #
# MULT – Multiply                                     # -- mult32  -- #      #
# XOR – Bitwise exclusive or                          # -- xor32   -- #      #
# XORI – Bitwise exclusive or immediate               # -- xor32   -- #      #
#                                                                            #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

circuit NOT !b31 { in31 }
circuit NOT !b30 { in30 }
circuit NOT !b29 { in29 }
circuit NOT !b28 { in28 }
circuit NOT !b27 { in27 }
circuit NOT !b26 { in26 }
circuit NOT !b25 { in25 }
circuit NOT !b24 { in24 }
circuit NOT !b23 { in23 }
circuit NOT !b22 { in22 }
circuit NOT !b21 { in21 }
circuit NOT !b20 { in20 }
circuit NOT !b19 { in19 }
circuit NOT !b18 { in18 }
circuit NOT !b17 { in17 }
circuit NOT !b16 { in16 }
circuit NOT !b15 { in15 }
circuit NOT !b14 { in14 }
circuit NOT !b13 { in13 }
circuit NOT !b12 { in12 }
circuit NOT !b11 { in11 }
circuit NOT !b10 { in10 }
circuit NOT !b9 { in9 }
circuit NOT !b8 { in8 }
circuit NOT !b7 { in7 }
circuit NOT !b6 { in6 }
circuit NOT !b5 { in5 }
circuit NOT !b4 { in4 }
circuit NOT !b3 { in3 }
circuit NOT !b2 { in2 }
circuit NOT !b1 { in1 }
circuit NOT !b0 { in0 }

# # # # # # ALU INSTRUCTIONS # # # # # # # # # # #
# ADDU - 0000 00ss ssst tttt dddd d000 0010 0001 #
# ADD  - 0000 00ss ssst tttt dddd d000 0010 0000 #
# ADDI - 0010 00ss ssst tttt iiii iiii iiii iiii #
# AND  - 0000 00ss ssst tttt dddd d000 0010 0100 #
# ANDI - 0011 00ss ssst tttt iiii iiii iiii iiii #
# OR   - 0000 00ss ssst tttt dddd d000 0010 0101 #
# ORI  - 0011 01ss ssst tttt iiii iiii iiii iiii #
# SUB  - 0000 00ss ssst tttt dddd d000 0010 0010 #
# XOR  - 0000 00ss ssst tttt dddd d--- --10 0110 #
# XORI - 0011 10ss ssst tttt iiii iiii iiii iiii #
# # # # # # # # # # # # # # # # # # # # # # # # #


# brute force way for all 17 possible inputs not gates all of them
# and gate, negated version for the zero instructions, if what comes out is a 1 then
# what comes out is the instruction we thought

# Test for ADDU, in5 and in0 on
circuit AND17 isADDU {!b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b7 !b6 in5 !b4 !b3 !b2 !b1 in0 }

# Test for ADD, in5 on
circuit AND17 isADD { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b7 !b6 in5 !b4 !b3 !b2 !b1 !b0 }

# Test for ADDI, in29 on, we use AND6 because only first 6 are instruction
circuit AND6 isADDI { !b31 !b30 in29 !b28 !b27 !b26 }

# Test for AND, in2 and in5 are on
circuit AND17 isAND { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b6 !b6 in5 !b4 !b3 in2 !b1 !b0 }

# Test for ANDI, in29 in28 are on, use AND6
circuit AND6 isANDI { !b31 !b30 in29 in28 !b27 !b26 }

#Test for OR, in0, in2, in5 are on
circuit AND17 isOR { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b6 !b6 in5 !b4 !b3 in2 !b1 in0 }

#Test for ORI, in29, in28, in26
circuit AND6 isANDI { !b31 !b30 in29 in28 !b27 in26 }

#Test for SUB, in1, in5 are on
circuit AND17 isSUB { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b6 !b6 in5 !b4 !b3 !b2 in1 !b0 }

#Test for XOR, in1, in2, in5
circuit AND17 isXOR { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b6 !b6 in5 !b4 !b3 in2 in1 !b0 }

#Test for XORI, in29, in28, in27
circuit AND6 isANDI { !b31 !b30 in29 in28 in27 in26 }


# # # # # ALU Controls # # # # #
#00=add, 01=and, 10=or, 11=xor #
#        F1  F0 INVB CIN       #
# ADDU -  0   0    0   0       #
# ADD  -  0   0    0   0       #
# ADDI -  0   0    0   0       #
# AND  -  0   1    0   0       #
# ANDI -  0   1    0   0       #
# OR   -  1   0    0   0       #
# ORI  -  1   0    0   0       #
# SUB  -  0   0    1   1       #
# XOR  -  1   1    0   0       #
# XORI -  1   1    0   0       #
# # # # # # # # # # # # # # # #

# Here we are going to OR together all
# like instructions so we can get ready to send out F1 and F0

circuit OR4 isAddInstruction { isADDU isADD isADDI isSUB }
circuit OR isAndInstruction { isAND isANDI }
circuit OR isOrInstruction { isOR isORI }
circuit OR isXorInstruction { isXOR isXORI }

# Are we an SLT instruction?
circuit OR isSLT { isSLT isSLTI }

# Are INVB and CIN on?
circuit OR isSubInstruction { isSLT isSUB }

#Select ALU should be on if its any of the above
circuit OR6 isALU { isAddInstruction isAndInstruction isOrInstruction isXorInstruction isSUB isSLT }

#outputs F1 and F0
circuit MIPS_Decoder_ALUControls ALUControls { isAddInstruction isAndInstruction isOrInstruction isXorInstruction }

# # # # # # # Shift Instructions # # # # # # # # #
# SRL  - 0000 00-- ---t tttt dddd dhhh hh00 0010 #
# SRLV – 0000 00ss ssst tttt dddd d000 0000 0110 #
# SRA  – 0000 00-- ---t tttt dddd dhhh hh00 0011 #
# # # # # # # # # # # # # # # # # # # # # # # # #

#Check to see if we are SRL, SRLV, or SRA type instruction
circuit AND12 isSRL { !b31 !b30 !b29 !b28 !b27 !b26 !b5 !b4 !b3 !b2 in1 !b0 }
circuit AND12 isSRLV { !b31 !b30 !b29 !b28 !b27 !b26 !b5 !b4 !b3 in2 in1 !b0 }
circuit AND12 isSRA { !b31 !b30 !b29 !b28 !b27 !b26 !b5 !b4 !b3 !b2 in1 in0 }

# If we are any of those, we are a shift instruction
circuit OR3 isShift { isSRL isSRLV isSRA }

# SRL and SRA use SHAMT, SRLV uses variable shift amount
circuit AND useVariableShift { isShift isSRLV }

# # # # # SLT Instructions # # # # # # # # # # # #
# SLT  - 0000 00ss ssst tttt dddd d000 0010 1010 #
# SLTI - 0010 10ss ssst tttt iiii iiii iiii iiii #
# # # # # # # # # # # # # # # # # # # # # # # # #

circuit AND17 isSLT { !b31 !b30 !b29 !b28 !b27 !b26 !b10 !b9 !b8 !b7 !b6 in5 !b4 in3 !b2 in1 !b0 }
circuit AND6 isSLTI { !b31 !b30 in29 !b28 in27 !b26 }



# Check to use immediate: ADDI, ANDI, ORI, SLTI, XORI all use immediate value
circuit OR6 useImmediate { isADDI isANDI isORI isSLTI isXORI 0 }

# Are we a multiply instruction?
# 0000 00ss ssst tttt 0000 0000 0001 1000
circuit AND22 isMultiply { !b31 !b30 !b29 !b28 !b27 !b26 !b15 !b14 !b13 !b12 !b11 !b10 !b9 !b8 !b7 !b6 !b5 in4 in3 !b2 !b1 !b0 }



# INVA is 0 (not in use)
outputs { ALUControls.F1, ALUControls.F0, 0, isSubInstruction, isSubInstruction, useImmediate, isSRA, useVariableShift, isALU, isMultiply }


#The 16 bit immediate gets sign extended for ADDI and SLTI (for everything else it doesnt)
